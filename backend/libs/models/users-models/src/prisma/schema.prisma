// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
enum UserRole {
  coach
  sportsman
}

enum UserSex {
  male
  female
  any
}

enum FitnessLevel {
  beginner
  amateur
  pro
}

enum WorkoutType {
  yoga
  running
  boxing
  stretching
  crossfit
  aerobics
  pilates
}

enum Location {
  pionerskaya
  petrogradskaya
  udelnaya
  zvyozdnaya
  sportivnaya
}

generator client {
  provider        = "prisma-client-js"
  output          = "../../../../../node_modules/@prisma/users/client"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          Int           @id @default(autoincrement()) @map("user_id")
  name            String
  email           String
  password        String
  sex             UserSex
  role            UserRole
  location        Location
  description     String?
  birthDate       String?       @map("birth_date")
  createdDate     DateTime      @default(now())
  updatedDate     DateTime      @updatedAt
  avatar          String?
  photo           String?
  sportsmanInfo   Sportsman?
  coachInfo       Coach?
  workoutType     WorkoutType[] @map("workout_type")
  fitnessLevel    FitnessLevel  @map("fitness_level")
  friendsReciever Friend[]      @relation(name: "friends_reciever")
  friendsSender   Friend[]      @relation(name: "friends_sender")
  subscriptions   Int[]

  @@map("users")
}

model Sportsman {
  sportsmanId    Int     @id @default(autoincrement()) @map("sportsman_id")
  userId         Int     @unique @map("user_id")
  workoutTime    String  @map("workout_time")
  caloriesTotal  Int     @map("calories_total")
  caloriesPerDay Int     @map("calories_per_day")
  isReady        Boolean @default(false) @map("is_ready")
  user           User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@map("sportsman_info")
}

model Coach {
  coachId     Int      @id @default(autoincrement()) @map("coach_id")
  userId      Int      @unique @map("user_id")
  successInfo String?  @map("success_info")
  certificate String?
  isPersonal  Boolean? @default(false) @map("is_personal")
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@map("coach_info")
}

model RefreshToken {
  refreshTokenId Int      @id @default(autoincrement()) @map("refresh_token_id")
  tokenId        String   @map("token_id")
  userId         Int      @map("user_id")
  createdAt      DateTime @default(now()) @map("created_at")
  expiresIn      DateTime @default(now()) @map("expires_in")

  @@map("refresh_token")
}

model Friend {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  friendId    Int      @map("friend_id")
  createdDate DateTime @default(now()) @map("created_date")
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade, name: "friends_sender")
  friend      User     @relation(fields: [friendId], references: [userId], onDelete: Cascade, onUpdate: Cascade, name: "friends_reciever")

  @@map("friends")
}
